#!/bin/bash

# Configuration
GITHUB_TOKEN="GITHUB_TOKEN"
GITHUB_REPO="the5orcerer/git-auto"
GITHUB_API="https://api.github.com"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Parse arguments
file=""
command=""

while [[ $# -gt 0 ]]; do
  case "$1" in
    -f)
      file="$2"
      shift 2
      ;;
    -c)
      command="$2"
      shift 2
      ;;
    *)
      echo -e "${RED}[!] Unknown argument: $1${NC}"
      echo "Usage: $0 -f <filename> -c <command>"
      echo "Example: $0 -f domains.txt -c \"subfinder -nW | httpx -server -title | nuclei -es info\""
      exit 1
      ;;
  esac
done

# Validate arguments
if [[ -z "$file" ]]; then
  echo -e "${RED}[!] You must provide an input file with -f${NC}"
  exit 1
fi

if [[ -z "$command" ]]; then
  echo -e "${RED}[!] You must provide a command with -c${NC}"
  exit 1
fi

if [[ ! -f "$file" ]]; then
  echo -e "${RED}[!] Input file $file not found${NC}"
  exit 1
fi

if [[ -z "$GITHUB_TOKEN" ]]; then
  echo -e "${RED}[!] GITHUB_TOKEN environment variable not set${NC}"
  echo "Export your GitHub token: export GITHUB_TOKEN=your_token_here"
  exit 1
fi

# Get just the filename without path
filename=$(basename "$file")

echo -e "${BLUE}[*] Starting upload and workflow trigger...${NC}"
echo -e "${YELLOW}[*] File: $filename${NC}"
echo -e "${YELLOW}[*] Command: $command${NC}"

# Read file content and encode to base64
file_content=$(base64 -w 0 "$file")

# Check for jq dependency
if ! command -v jq &> /dev/null; then
    echo -e "${RED}[!] jq is required but not installed${NC}"
    echo "Install with: sudo apt install jq  # or  brew install jq"
    exit 1
fi

# Check if file exists in repo upload directory (to get SHA for override)
echo -e "${BLUE}[*] Checking if file exists in repo upload directory...${NC}"
sha_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
  "$GITHUB_API/repos/$GITHUB_REPO/contents/upload/$filename")

sha=""
if echo "$sha_response" | jq -e '.sha' >/dev/null 2>&1; then
  sha=$(echo "$sha_response" | jq -r '.sha')
  echo -e "${YELLOW}[*] File exists, will override (SHA: ${sha:0:8}...)${NC}"
else
  echo -e "${BLUE}[*] New file will be created in upload directory${NC}"
fi

# Prepare JSON payload for upload directory
json_payload='{
  "message": "Upload '"$filename"' for scanning",
  "content": "'"$file_content"'"'

if [[ -n "$sha" ]]; then
  json_payload+=', "sha": "'"$sha"'"'
fi

json_payload+='}'

# Upload file to GitHub upload directory
echo -e "${BLUE}[*] Uploading file to GitHub upload directory...${NC}"
upload_response=$(curl -s -X PUT \
  -H "Authorization: token $GITHUB_TOKEN" \
  -H "Content-Type: application/json" \
  -d "$json_payload" \
  "$GITHUB_API/repos/$GITHUB_REPO/contents/upload/$filename")

if echo "$upload_response" | jq -e '.content' >/dev/null 2>&1; then
  echo -e "${GREEN}[+] File uploaded successfully${NC}"
else
  echo -e "${RED}[!] File upload failed${NC}"
  echo "$upload_response" | jq '.'
  exit 1
fi

# Trigger GitHub workflow
echo -e "${BLUE}[*] Triggering GitHub workflow...${NC}"
workflow_payload='{
  "ref": "main",
  "inputs": {
    "file_name": "'"$filename"'",
    "command": "'"$command"'"
  }
}'

workflow_response=$(curl -s -X POST \
  -H "Authorization: token $GITHUB_TOKEN" \
  -H "Content-Type: application/json" \
  -d "$workflow_payload" \
  "$GITHUB_API/repos/$GITHUB_REPO/actions/workflows/nuclei.yml/dispatches")

if [[ -z "$workflow_response" ]]; then
  echo -e "${GREEN}[+] Workflow triggered successfully${NC}"
  echo -e "${GREEN}[+] Check your Telegram for results${NC}"
  echo -e "${BLUE}[*] Monitor workflow: https://github.com/$GITHUB_REPO/actions${NC}"
else
  echo -e "${RED}[!] Workflow trigger failed${NC}"
  echo "$workflow_response"
  exit 1
fi

echo -e "${GREEN}[+] Process completed successfully${NC}"
