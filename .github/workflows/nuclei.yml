name: Nuclei Pipeline

on:
  workflow_dispatch:
    inputs:
      tools:
        required: true
        type: string
        description: "Tools to run (e.g., 'subfinder httpx nuclei' or 'httpx nuclei' or 'nuclei')"
      file_url:
        required: true
        type: string
        description: "URL to input file"
      file_name:
        required: true
        type: string
      subfinder_command:
        required: false
        type: string
      httpx_command:
        required: false
        type: string
      nuclei_command:
        required: false
        type: string

jobs:
  pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip jq git wget golang

          echo "[*] Installing subfinder..."
          go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          sudo mv ~/go/bin/subfinder /usr/local/bin/

          echo "[*] Installing httpx..."
          go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest
          sudo mv ~/go/bin/httpx /usr/local/bin/

          echo "[*] Installing nuclei..."
          go install -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest
          sudo mv ~/go/bin/nuclei /usr/local/bin/

      - name: Clone templates
        run: |
          if [ ! -d nuclei-templates ]; then
            git clone https://github.com/projectdiscovery/nuclei-templates.git
          else
            cd nuclei-templates && git pull origin main && cd ..
          fi

      - name: Download input file
        run: curl -sL "${{ inputs.file_url }}" -o "${{ inputs.file_name }}"

      - name: Run pipeline
        run: |
          mkdir -p results
          timestamp=$(date +%Y%m%d-%H%M%S)
          outfile="results/result-$timestamp.txt"

          file="${{ inputs.file_name }}"
          pipeline="cat \"$file\""

          for tool in ${{ inputs.tools }}; do
            case "$tool" in
              subfinder)
                pipeline+=" | subfinder ${{ inputs.subfinder_command }}"
                ;;
              httpx)
                pipeline+=" | httpx ${{ inputs.httpx_command }}"
                ;;
              nuclei)
                if [[ "${{ inputs.tools }}" == "nuclei" ]]; then
                  pipeline="nuclei -l \"$file\" ${{ inputs.nuclei_command }}"
                else
                  pipeline+=" | nuclei ${{ inputs.nuclei_command }}"
                fi
                ;;
            esac
          done

          echo "[*] Executing: $pipeline"
          eval "$pipeline" | tee "$outfile"

      - name: Send result to Telegram
        if: always()
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          outfile=$(ls results/result-*.txt | tail -n1)
          if [ -s "$outfile" ]; then
            curl -s -F document=@"$outfile" "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendDocument?chat_id=$TELEGRAM_CHAT_ID"
          else
            echo "No results to send"
          fi
